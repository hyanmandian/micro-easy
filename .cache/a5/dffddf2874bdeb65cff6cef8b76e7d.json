{"id":"app-1/index.html","dependencies":[{"name":"./../../src/index.ts","dynamic":true,"resolved":"/home/hyanmandian/Code/microeasy/src/index.ts","parent":"/home/hyanmandian/Code/microeasy/examples/app-1/index.html"},{"name":"/home/hyanmandian/Code/microeasy/package.json","includedInParent":true,"mtime":1580332672266}],"generated":{"html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>App 1</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <script src=\"/f9f51dab861f6e9aa91006c59caef6c7.js\"></script>\n  </head>\n  <body>\n    <button data-increment=\"\">Increment</button>\n    <button data-decrement=\"\">Decrement</button>\n\n    <script>function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar me = window.MicroEasy.register(\"name\");\n\nfunction init() {\n  return _init.apply(this, arguments);\n}\n\nfunction _init() {\n  _init = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    var counter, parent;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            counter = 0;\n            _context.next = 3;\n            return window.MicroEasy.getParent();\n\n          case 3:\n            parent = _context.sent;\n            // send counter value to parent\n            parent.emit('change', counter); // listen to reset event sent by parent\n\n            parent.on('reset', function () {\n              counter = 0;\n            });\n            querySelector('data-increment').on('click', function () {\n              counter += 1;\n              parent.emit('change', counter);\n            });\n            querySelector('data-decrement').on('click', function () {\n              counter -= 1;\n              parent.emit('change', counter);\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _init.apply(this, arguments);\n}\n\ninit();</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"e18a6598b86e4d4c40354e1bcbe162d5","cacheData":{"env":{}}}